package info.xudshen.jandan.model;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import info.xudshen.jandan.model.Joke;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "JOKE".
*/
public class JokeDao extends AbstractDao<Joke, Long> {

    public static final String TABLENAME = "JOKE";

    /**
     * Properties of entity Joke.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property JokeId = new Property(0, Long.class, "jokeId", true, "JOKE_ID");
        public final static Property Author = new Property(1, String.class, "author", false, "AUTHOR");
        public final static Property Content = new Property(2, String.class, "content", false, "CONTENT");
    };


    public JokeDao(DaoConfig config) {
        super(config);
    }
    
    public JokeDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"JOKE\" (" + //
                "\"JOKE_ID\" INTEGER PRIMARY KEY ," + // 0: jokeId
                "\"AUTHOR\" TEXT," + // 1: author
                "\"CONTENT\" TEXT);"); // 2: content
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"JOKE\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Joke entity) {
        stmt.clearBindings();
 
        Long jokeId = entity.getJokeId();
        if (jokeId != null) {
            stmt.bindLong(1, jokeId);
        }
 
        String author = entity.getAuthor();
        if (author != null) {
            stmt.bindString(2, author);
        }
 
        String content = entity.getContent();
        if (content != null) {
            stmt.bindString(3, content);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Joke readEntity(Cursor cursor, int offset) {
        Joke entity = new Joke( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // jokeId
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // author
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2) // content
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Joke entity, int offset) {
        entity.setJokeId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setAuthor(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setContent(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Joke entity, long rowId) {
        entity.setJokeId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Joke entity) {
        if(entity != null) {
            return entity.getJokeId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
