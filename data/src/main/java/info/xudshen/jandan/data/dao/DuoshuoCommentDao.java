package info.xudshen.jandan.data.dao;

import java.lang.ref.WeakReference;

import android.content.ContentProviderOperation;
import android.content.ContentUris;
import android.content.Context;
import android.content.OperationApplicationException;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;
import android.net.Uri;
import android.os.RemoteException;

import info.xudshen.droiddata.dao.DDAbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import info.xudshen.droiddata.dao.IModelObservable;
import info.xudshen.droiddata.dao.converter.TimestampPropertyConverter;
import java.sql.Timestamp;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.Map;
import java.util.WeakHashMap;

import info.xudshen.jandan.domain.model.DuoshuoComment;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "DUOSHUO_COMMENT".
*/
public class DuoshuoCommentDao extends DDAbstractDao<DuoshuoComment, Long> {

    public static final String TABLENAME = "DUOSHUO_COMMENT";

    /**
     * Properties of entity DuoshuoComment.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property CommentId = new Property(1, String.class, "commentId", false, "COMMENT_ID");
        public final static Property ThreadId = new Property(2, String.class, "threadId", false, "THREAD_ID");
        public final static Property ThreadKey = new Property(3, String.class, "threadKey", false, "THREAD_KEY");
        public final static Property Message = new Property(4, String.class, "message", false, "MESSAGE");
        public final static Property Date = new Property(5, Long.class, "date", false, "DATE");
        public final static Property ParentCommentId = new Property(6, String.class, "parentCommentId", false, "PARENT_COMMENT_ID");
        public final static Property AuthorId = new Property(7, String.class, "authorId", false, "AUTHOR_ID");
        public final static Property AuthorName = new Property(8, String.class, "authorName", false, "AUTHOR_NAME");
        public final static Property AuthorAvatar = new Property(9, String.class, "authorAvatar", false, "AUTHOR_AVATAR");
        public final static Property AuthorUrl = new Property(10, String.class, "authorUrl", false, "AUTHOR_URL");
    }

    private final TimestampPropertyConverter dateConverter = new TimestampPropertyConverter();

    public DuoshuoCommentDao(DaoConfig config) {
        super(config);
    }
    
    public DuoshuoCommentDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists ? "IF NOT EXISTS " : "";
        db.execSQL("CREATE TABLE " + constraint + "\"DUOSHUO_COMMENT\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"COMMENT_ID\" TEXT," + // 1: commentId
                "\"THREAD_ID\" TEXT," + // 2: threadId
                "\"THREAD_KEY\" TEXT," + // 3: threadKey
                "\"MESSAGE\" TEXT," + // 4: message
                "\"DATE\" INTEGER," + // 5: date
                "\"PARENT_COMMENT_ID\" TEXT," + // 6: parentCommentId
                "\"AUTHOR_ID\" TEXT," + // 7: authorId
                "\"AUTHOR_NAME\" TEXT," + // 8: authorName
                "\"AUTHOR_AVATAR\" TEXT," + // 9: authorAvatar
                "\"AUTHOR_URL\" TEXT);"); // 10: authorUrl
        // Add Indexes
        db.execSQL("CREATE UNIQUE INDEX " + constraint + "IDX_DUOSHUO_COMMENT_COMMENT_ID_THREAD_KEY ON DUOSHUO_COMMENT" +
                " (\"COMMENT_ID\",\"THREAD_KEY\");");
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"DUOSHUO_COMMENT\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, DuoshuoComment entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String commentId = entity.getCommentId();
        if (commentId != null) {
            stmt.bindString(2, commentId);
        }
 
        String threadId = entity.getThreadId();
        if (threadId != null) {
            stmt.bindString(3, threadId);
        }
 
        String threadKey = entity.getThreadKey();
        if (threadKey != null) {
            stmt.bindString(4, threadKey);
        }
 
        String message = entity.getMessage();
        if (message != null) {
            stmt.bindString(5, message);
        }
 
        Timestamp date = entity.getDate();
        if (date != null) {
            stmt.bindLong(6, dateConverter.convertToDatabaseValue(date));
        }
 
        String parentCommentId = entity.getParentCommentId();
        if (parentCommentId != null) {
            stmt.bindString(7, parentCommentId);
        }
 
        String authorId = entity.getAuthorId();
        if (authorId != null) {
            stmt.bindString(8, authorId);
        }
 
        String authorName = entity.getAuthorName();
        if (authorName != null) {
            stmt.bindString(9, authorName);
        }
 
        String authorAvatar = entity.getAuthorAvatar();
        if (authorAvatar != null) {
            stmt.bindString(10, authorAvatar);
        }
 
        String authorUrl = entity.getAuthorUrl();
        if (authorUrl != null) {
            stmt.bindString(11, authorUrl);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    protected DuoshuoComment readEntity(Cursor cursor, int offset) {
        DuoshuoComment entity = new DuoshuoComment( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // commentId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // threadId
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // threadKey
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // message
            cursor.isNull(offset + 5) ? null : dateConverter.convertToEntityProperty(Timestamp.class, cursor.getLong(offset + 5)), // date
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // parentCommentId
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // authorId
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // authorName
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // authorAvatar
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10) // authorUrl
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    protected void readEntity(Cursor cursor, DuoshuoComment entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setCommentId(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setThreadId(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setThreadKey(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setMessage(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setDate(cursor.isNull(offset + 5) ? null : dateConverter.convertToEntityProperty(Timestamp.class, cursor.getLong(offset + 5)));
        entity.setParentCommentId(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setAuthorId(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setAuthorName(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setAuthorAvatar(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setAuthorUrl(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
    }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(DuoshuoComment entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(DuoshuoComment entity) {
        if (entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }

    public static final String AUTHORITY = "info.xudshen.jandan.data.dao.provider";
    public static final Uri CONTENT_URI = Uri.parse("content://" + AUTHORITY + "/" + TABLENAME);
    private WeakReference<Context> contextWeakReference;

    public void setContext(Context context) {
        contextWeakReference = new WeakReference<Context>(context);
    }

    @Override
    protected void notifyInsert(DuoshuoComment entity) {
        Long key = getKey(entity);
        if (key != null) {
            notifyExtraOb(key);

            if (contextWeakReference.get() != null)
                contextWeakReference.get().getContentResolver().insert(
                        ContentUris.withAppendedId(CONTENT_URI, key), null);
        }
    }

    @Override
    protected void notifyInsert(Iterable<DuoshuoComment> entities) {
        ArrayList<ContentProviderOperation> ops = new ArrayList<ContentProviderOperation>();

        for (DuoshuoComment entity : entities) {
            Long key = getKey(entity);
            if (key != null) {
                notifyExtraOb(key);

                ops.add(ContentProviderOperation.newInsert(
                        ContentUris.withAppendedId(CONTENT_URI, key)).build());
            }
        }

        try {
            if (contextWeakReference.get() != null)
                contextWeakReference.get().getContentResolver().applyBatch(AUTHORITY, ops);
        } catch (RemoteException e) {
            e.printStackTrace();
        } catch (OperationApplicationException e) {
            e.printStackTrace();
        }
    }

    @Override
    protected void notifyUpdate(DuoshuoComment entity) {
        Long key = getKey(entity);
        if (key != null) {
            notifyExtraOb(key);

            if (contextWeakReference.get() != null)
                contextWeakReference.get().getContentResolver().update(
                        ContentUris.withAppendedId(CONTENT_URI, key), null, null, null);
        }
    }

    @Override
    protected void notifyUpdate(Iterable<DuoshuoComment> entities) {
        ArrayList<ContentProviderOperation> ops = new ArrayList<ContentProviderOperation>();

        for (DuoshuoComment entity : entities) {
            Long key = getKey(entity);
            if (key != null) {
                notifyExtraOb(key);

                ops.add(ContentProviderOperation.newUpdate(
                        ContentUris.withAppendedId(CONTENT_URI, key)).withValue(null, null).build());
            }
        }

        try {
            if (contextWeakReference.get() != null)
                contextWeakReference.get().getContentResolver().applyBatch(AUTHORITY, ops);
        } catch (RemoteException e) {
            e.printStackTrace();
        } catch (OperationApplicationException e) {
            e.printStackTrace();
        }
    }

    @Override
    protected void notifyDelete(DuoshuoComment entity) {
        Long key = getKey(entity);
        if (key != null) {
            if (contextWeakReference.get() != null)
                contextWeakReference.get().getContentResolver().delete(
                        ContentUris.withAppendedId(CONTENT_URI, key), null, null);
        }
    }

    @Override
    protected void notifyDelete(Iterable<DuoshuoComment> entities) {
        ArrayList<ContentProviderOperation> ops = new ArrayList<ContentProviderOperation>();

        for (DuoshuoComment entity : entities) {
            Long key = getKey(entity);
            if (key != null) {
                ops.add(ContentProviderOperation.newDelete(
                        ContentUris.withAppendedId(CONTENT_URI, key)).build());
            }
        }

        try {
            if (contextWeakReference.get() != null)
                contextWeakReference.get().getContentResolver().applyBatch(AUTHORITY, ops);
        } catch (RemoteException e) {
            e.printStackTrace();
        } catch (OperationApplicationException e) {
            e.printStackTrace();
        }
    }

    @Override
    protected void notifyDeleteByKey(Long key) {
        if (key != null && contextWeakReference.get() != null) {
            if (key == -1) {
                contextWeakReference.get().getContentResolver().delete(
                        CONTENT_URI, null, null);
            } else {
                contextWeakReference.get().getContentResolver().delete(
                        ContentUris.withAppendedId(CONTENT_URI, key), null, null);
            }
        }
    }

    @Override
    protected void notifyDeleteByKey(Iterable<Long> keys) {
        ArrayList<ContentProviderOperation> ops = new ArrayList<ContentProviderOperation>();

        for (Long key : keys) {
            if (key != null) {
                ops.add(ContentProviderOperation.newDelete(
                        ContentUris.withAppendedId(CONTENT_URI, key)).build());
            }
        }

        try {
            if (contextWeakReference.get() != null)
                contextWeakReference.get().getContentResolver().applyBatch(AUTHORITY, ops);
        } catch (RemoteException e) {
            e.printStackTrace();
        } catch (OperationApplicationException e) {
            e.printStackTrace();
        }
    }

    private Map<Long, WeakHashMap<IModelObservable<DuoshuoComment>, Boolean>> extraObMap = new HashMap<>();

    /**
     * register entity to extraObMap
     */
    public void registerExtraOb(IModelObservable entity) {
        if (entity == null) return;
        if (!extraObMap.containsKey(entity.getModelKey())) {
            extraObMap.put(entity.getModelKey(), new WeakHashMap<>());
        }
        WeakHashMap<IModelObservable<DuoshuoComment>, Boolean> map = extraObMap.get(entity.getModelKey());
        if (!map.containsKey(entity)) {
            map.put(entity, true);
        }
    }

    private void notifyExtraOb(Long key) {
        if (extraObMap.containsKey(key)) {
            DuoshuoComment newEntity = load(key);
            for (IModelObservable<DuoshuoComment> entity : extraObMap.get(key).keySet()) {
                if (entity != null)
                    entity.refresh(newEntity);
            }
        }
    }

    public DuoshuoComment loadEntity(Cursor cursor){
        return this.readEntity(cursor, 0);
    }

}
