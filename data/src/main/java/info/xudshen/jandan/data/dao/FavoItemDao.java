package info.xudshen.jandan.data.dao;

import java.lang.ref.WeakReference;

import android.content.ContentProviderOperation;
import android.content.ContentUris;
import android.content.Context;
import android.content.OperationApplicationException;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;
import android.net.Uri;
import android.os.RemoteException;

import info.xudshen.droiddata.dao.DDAbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import info.xudshen.droiddata.dao.IModelObservable;
import info.xudshen.droiddata.dao.converter.EnumPropertyConverter;
import info.xudshen.droiddata.dao.converter.TimestampPropertyConverter;
import info.xudshen.jandan.domain.enums.ReaderItemType;
import java.sql.Timestamp;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.Map;
import java.util.WeakHashMap;

import info.xudshen.jandan.domain.model.FavoItem;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "FAVO_ITEM".
*/
public class FavoItemDao extends DDAbstractDao<FavoItem, Long> {

    public static final String TABLENAME = "FAVO_ITEM";

    /**
     * Properties of entity FavoItem.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Type = new Property(1, String.class, "type", false, "TYPE");
        public final static Property ActualId = new Property(2, String.class, "actualId", false, "ACTUAL_ID");
        public final static Property AddDate = new Property(3, Long.class, "addDate", false, "ADD_DATE");
        public final static Property Url = new Property(4, String.class, "url", false, "URL");
        public final static Property Title = new Property(5, String.class, "title", false, "TITLE");
        public final static Property Excerpt = new Property(6, String.class, "excerpt", false, "EXCERPT");
        public final static Property ThumbC = new Property(7, String.class, "thumbC", false, "THUMB_C");
        public final static Property OtherId = new Property(8, Long.class, "otherId", false, "OTHER_ID");
        public final static Property Author = new Property(9, String.class, "author", false, "AUTHOR");
        public final static Property AuthorEmail = new Property(10, String.class, "authorEmail", false, "AUTHOR_EMAIL");
        public final static Property AuthorUrl = new Property(11, String.class, "authorUrl", false, "AUTHOR_URL");
        public final static Property Date = new Property(12, Long.class, "date", false, "DATE");
        public final static Property VotePositive = new Property(13, Long.class, "votePositive", false, "VOTE_POSITIVE");
        public final static Property VoteNegative = new Property(14, Long.class, "voteNegative", false, "VOTE_NEGATIVE");
        public final static Property CommentCount = new Property(15, Long.class, "commentCount", false, "COMMENT_COUNT");
        public final static Property ThreadId = new Property(16, String.class, "threadId", false, "THREAD_ID");
        public final static Property Content = new Property(17, String.class, "content", false, "CONTENT");
        public final static Property TextContent = new Property(18, String.class, "textContent", false, "TEXT_CONTENT");
        public final static Property Pics = new Property(19, String.class, "pics", false, "PICS");
        public final static Property PicFirst = new Property(20, String.class, "picFirst", false, "PIC_FIRST");
        public final static Property PicCount = new Property(21, Long.class, "picCount", false, "PIC_COUNT");
        public final static Property HasGif = new Property(22, Boolean.class, "hasGif", false, "HAS_GIF");
        public final static Property VideoThumbnail = new Property(23, String.class, "videoThumbnail", false, "VIDEO_THUMBNAIL");
        public final static Property VideoTitle = new Property(24, String.class, "videoTitle", false, "VIDEO_TITLE");
        public final static Property VideoDescription = new Property(25, String.class, "videoDescription", false, "VIDEO_DESCRIPTION");
        public final static Property VideoDuration = new Property(26, Float.class, "videoDuration", false, "VIDEO_DURATION");
        public final static Property VideoLink = new Property(27, String.class, "videoLink", false, "VIDEO_LINK");
        public final static Property VideoPlayer = new Property(28, String.class, "videoPlayer", false, "VIDEO_PLAYER");
        public final static Property VideoSource = new Property(29, String.class, "videoSource", false, "VIDEO_SOURCE");
    }

    private final EnumPropertyConverter<ReaderItemType> typeConverter = new EnumPropertyConverter<ReaderItemType>();
    private final TimestampPropertyConverter addDateConverter = new TimestampPropertyConverter();
    private final TimestampPropertyConverter dateConverter = new TimestampPropertyConverter();

    public FavoItemDao(DaoConfig config) {
        super(config);
    }
    
    public FavoItemDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists ? "IF NOT EXISTS " : "";
        db.execSQL("CREATE TABLE " + constraint + "\"FAVO_ITEM\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"TYPE\" TEXT," + // 1: type
                "\"ACTUAL_ID\" TEXT," + // 2: actualId
                "\"ADD_DATE\" INTEGER," + // 3: addDate
                "\"URL\" TEXT," + // 4: url
                "\"TITLE\" TEXT," + // 5: title
                "\"EXCERPT\" TEXT," + // 6: excerpt
                "\"THUMB_C\" TEXT," + // 7: thumbC
                "\"OTHER_ID\" INTEGER," + // 8: otherId
                "\"AUTHOR\" TEXT," + // 9: author
                "\"AUTHOR_EMAIL\" TEXT," + // 10: authorEmail
                "\"AUTHOR_URL\" TEXT," + // 11: authorUrl
                "\"DATE\" INTEGER," + // 12: date
                "\"VOTE_POSITIVE\" INTEGER," + // 13: votePositive
                "\"VOTE_NEGATIVE\" INTEGER," + // 14: voteNegative
                "\"COMMENT_COUNT\" INTEGER," + // 15: commentCount
                "\"THREAD_ID\" TEXT," + // 16: threadId
                "\"CONTENT\" TEXT," + // 17: content
                "\"TEXT_CONTENT\" TEXT," + // 18: textContent
                "\"PICS\" TEXT," + // 19: pics
                "\"PIC_FIRST\" TEXT," + // 20: picFirst
                "\"PIC_COUNT\" INTEGER," + // 21: picCount
                "\"HAS_GIF\" INTEGER," + // 22: hasGif
                "\"VIDEO_THUMBNAIL\" TEXT," + // 23: videoThumbnail
                "\"VIDEO_TITLE\" TEXT," + // 24: videoTitle
                "\"VIDEO_DESCRIPTION\" TEXT," + // 25: videoDescription
                "\"VIDEO_DURATION\" REAL," + // 26: videoDuration
                "\"VIDEO_LINK\" TEXT," + // 27: videoLink
                "\"VIDEO_PLAYER\" TEXT," + // 28: videoPlayer
                "\"VIDEO_SOURCE\" TEXT);"); // 29: videoSource
        // Add Indexes
        db.execSQL("CREATE UNIQUE INDEX " + constraint + "IDX_FAVO_ITEM_TYPE_ACTUAL_ID ON FAVO_ITEM" +
                " (\"TYPE\",\"ACTUAL_ID\");");
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"FAVO_ITEM\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, FavoItem entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        ReaderItemType type = entity.getType();
        if (type != null) {
            stmt.bindString(2, typeConverter.convertToDatabaseValue(type));
        }
 
        String actualId = entity.getActualId();
        if (actualId != null) {
            stmt.bindString(3, actualId);
        }
 
        Timestamp addDate = entity.getAddDate();
        if (addDate != null) {
            stmt.bindLong(4, addDateConverter.convertToDatabaseValue(addDate));
        }
 
        String url = entity.getUrl();
        if (url != null) {
            stmt.bindString(5, url);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(6, title);
        }
 
        String excerpt = entity.getExcerpt();
        if (excerpt != null) {
            stmt.bindString(7, excerpt);
        }
 
        String thumbC = entity.getThumbC();
        if (thumbC != null) {
            stmt.bindString(8, thumbC);
        }
 
        Long otherId = entity.getOtherId();
        if (otherId != null) {
            stmt.bindLong(9, otherId);
        }
 
        String author = entity.getAuthor();
        if (author != null) {
            stmt.bindString(10, author);
        }
 
        String authorEmail = entity.getAuthorEmail();
        if (authorEmail != null) {
            stmt.bindString(11, authorEmail);
        }
 
        String authorUrl = entity.getAuthorUrl();
        if (authorUrl != null) {
            stmt.bindString(12, authorUrl);
        }
 
        Timestamp date = entity.getDate();
        if (date != null) {
            stmt.bindLong(13, dateConverter.convertToDatabaseValue(date));
        }
 
        Long votePositive = entity.getVotePositive();
        if (votePositive != null) {
            stmt.bindLong(14, votePositive);
        }
 
        Long voteNegative = entity.getVoteNegative();
        if (voteNegative != null) {
            stmt.bindLong(15, voteNegative);
        }
 
        Long commentCount = entity.getCommentCount();
        if (commentCount != null) {
            stmt.bindLong(16, commentCount);
        }
 
        String threadId = entity.getThreadId();
        if (threadId != null) {
            stmt.bindString(17, threadId);
        }
 
        String content = entity.getContent();
        if (content != null) {
            stmt.bindString(18, content);
        }
 
        String textContent = entity.getTextContent();
        if (textContent != null) {
            stmt.bindString(19, textContent);
        }
 
        String pics = entity.getPics();
        if (pics != null) {
            stmt.bindString(20, pics);
        }
 
        String picFirst = entity.getPicFirst();
        if (picFirst != null) {
            stmt.bindString(21, picFirst);
        }
 
        Long picCount = entity.getPicCount();
        if (picCount != null) {
            stmt.bindLong(22, picCount);
        }
 
        Boolean hasGif = entity.getHasGif();
        if (hasGif != null) {
            stmt.bindLong(23, hasGif ? 1L: 0L);
        }
 
        String videoThumbnail = entity.getVideoThumbnail();
        if (videoThumbnail != null) {
            stmt.bindString(24, videoThumbnail);
        }
 
        String videoTitle = entity.getVideoTitle();
        if (videoTitle != null) {
            stmt.bindString(25, videoTitle);
        }
 
        String videoDescription = entity.getVideoDescription();
        if (videoDescription != null) {
            stmt.bindString(26, videoDescription);
        }
 
        Float videoDuration = entity.getVideoDuration();
        if (videoDuration != null) {
            stmt.bindDouble(27, videoDuration);
        }
 
        String videoLink = entity.getVideoLink();
        if (videoLink != null) {
            stmt.bindString(28, videoLink);
        }
 
        String videoPlayer = entity.getVideoPlayer();
        if (videoPlayer != null) {
            stmt.bindString(29, videoPlayer);
        }
 
        String videoSource = entity.getVideoSource();
        if (videoSource != null) {
            stmt.bindString(30, videoSource);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    protected FavoItem readEntity(Cursor cursor, int offset) {
        FavoItem entity = new FavoItem( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : typeConverter.convertToEntityProperty(ReaderItemType.class, cursor.getString(offset + 1)), // type
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // actualId
            cursor.isNull(offset + 3) ? null : addDateConverter.convertToEntityProperty(Timestamp.class, cursor.getLong(offset + 3)), // addDate
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // url
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // title
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // excerpt
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // thumbC
            cursor.isNull(offset + 8) ? null : cursor.getLong(offset + 8), // otherId
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // author
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // authorEmail
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // authorUrl
            cursor.isNull(offset + 12) ? null : dateConverter.convertToEntityProperty(Timestamp.class, cursor.getLong(offset + 12)), // date
            cursor.isNull(offset + 13) ? null : cursor.getLong(offset + 13), // votePositive
            cursor.isNull(offset + 14) ? null : cursor.getLong(offset + 14), // voteNegative
            cursor.isNull(offset + 15) ? null : cursor.getLong(offset + 15), // commentCount
            cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16), // threadId
            cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17), // content
            cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18), // textContent
            cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19), // pics
            cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20), // picFirst
            cursor.isNull(offset + 21) ? null : cursor.getLong(offset + 21), // picCount
            cursor.isNull(offset + 22) ? null : cursor.getShort(offset + 22) != 0, // hasGif
            cursor.isNull(offset + 23) ? null : cursor.getString(offset + 23), // videoThumbnail
            cursor.isNull(offset + 24) ? null : cursor.getString(offset + 24), // videoTitle
            cursor.isNull(offset + 25) ? null : cursor.getString(offset + 25), // videoDescription
            cursor.isNull(offset + 26) ? null : cursor.getFloat(offset + 26), // videoDuration
            cursor.isNull(offset + 27) ? null : cursor.getString(offset + 27), // videoLink
            cursor.isNull(offset + 28) ? null : cursor.getString(offset + 28), // videoPlayer
            cursor.isNull(offset + 29) ? null : cursor.getString(offset + 29) // videoSource
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    protected void readEntity(Cursor cursor, FavoItem entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setType(cursor.isNull(offset + 1) ? null : typeConverter.convertToEntityProperty(ReaderItemType.class, cursor.getString(offset + 1)));
        entity.setActualId(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setAddDate(cursor.isNull(offset + 3) ? null : addDateConverter.convertToEntityProperty(Timestamp.class, cursor.getLong(offset + 3)));
        entity.setUrl(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setTitle(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setExcerpt(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setThumbC(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setOtherId(cursor.isNull(offset + 8) ? null : cursor.getLong(offset + 8));
        entity.setAuthor(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setAuthorEmail(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setAuthorUrl(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setDate(cursor.isNull(offset + 12) ? null : dateConverter.convertToEntityProperty(Timestamp.class, cursor.getLong(offset + 12)));
        entity.setVotePositive(cursor.isNull(offset + 13) ? null : cursor.getLong(offset + 13));
        entity.setVoteNegative(cursor.isNull(offset + 14) ? null : cursor.getLong(offset + 14));
        entity.setCommentCount(cursor.isNull(offset + 15) ? null : cursor.getLong(offset + 15));
        entity.setThreadId(cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16));
        entity.setContent(cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17));
        entity.setTextContent(cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18));
        entity.setPics(cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19));
        entity.setPicFirst(cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20));
        entity.setPicCount(cursor.isNull(offset + 21) ? null : cursor.getLong(offset + 21));
        entity.setHasGif(cursor.isNull(offset + 22) ? null : cursor.getShort(offset + 22) != 0);
        entity.setVideoThumbnail(cursor.isNull(offset + 23) ? null : cursor.getString(offset + 23));
        entity.setVideoTitle(cursor.isNull(offset + 24) ? null : cursor.getString(offset + 24));
        entity.setVideoDescription(cursor.isNull(offset + 25) ? null : cursor.getString(offset + 25));
        entity.setVideoDuration(cursor.isNull(offset + 26) ? null : cursor.getFloat(offset + 26));
        entity.setVideoLink(cursor.isNull(offset + 27) ? null : cursor.getString(offset + 27));
        entity.setVideoPlayer(cursor.isNull(offset + 28) ? null : cursor.getString(offset + 28));
        entity.setVideoSource(cursor.isNull(offset + 29) ? null : cursor.getString(offset + 29));
    }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(FavoItem entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(FavoItem entity) {
        if (entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }

    public static final String AUTHORITY = "info.xudshen.jandan.data.dao.provider";
    public static final Uri CONTENT_URI = Uri.parse("content://" + AUTHORITY + "/" + TABLENAME);
    private WeakReference<Context> contextWeakReference;

    public void setContext(Context context) {
        contextWeakReference = new WeakReference<Context>(context);
    }

    @Override
    protected void notifyInsert(FavoItem entity) {
        Long key = getKey(entity);
        if (key != null) {
            notifyExtraOb(key);

            if (contextWeakReference.get() != null)
                contextWeakReference.get().getContentResolver().insert(
                        ContentUris.withAppendedId(CONTENT_URI, key), null);
        }
    }

    @Override
    protected void notifyInsert(Iterable<FavoItem> entities) {
        ArrayList<ContentProviderOperation> ops = new ArrayList<ContentProviderOperation>();

        for (FavoItem entity : entities) {
            Long key = getKey(entity);
            if (key != null) {
                notifyExtraOb(key);

                ops.add(ContentProviderOperation.newInsert(
                        ContentUris.withAppendedId(CONTENT_URI, key)).build());
            }
        }

        try {
            if (contextWeakReference.get() != null)
                contextWeakReference.get().getContentResolver().applyBatch(AUTHORITY, ops);
        } catch (RemoteException e) {
            e.printStackTrace();
        } catch (OperationApplicationException e) {
            e.printStackTrace();
        }
    }

    @Override
    protected void notifyUpdate(FavoItem entity) {
        Long key = getKey(entity);
        if (key != null) {
            notifyExtraOb(key);

            if (contextWeakReference.get() != null)
                contextWeakReference.get().getContentResolver().update(
                        ContentUris.withAppendedId(CONTENT_URI, key), null, null, null);
        }
    }

    @Override
    protected void notifyUpdate(Iterable<FavoItem> entities) {
        ArrayList<ContentProviderOperation> ops = new ArrayList<ContentProviderOperation>();

        for (FavoItem entity : entities) {
            Long key = getKey(entity);
            if (key != null) {
                notifyExtraOb(key);

                ops.add(ContentProviderOperation.newUpdate(
                        ContentUris.withAppendedId(CONTENT_URI, key)).withValue(null, null).build());
            }
        }

        try {
            if (contextWeakReference.get() != null)
                contextWeakReference.get().getContentResolver().applyBatch(AUTHORITY, ops);
        } catch (RemoteException e) {
            e.printStackTrace();
        } catch (OperationApplicationException e) {
            e.printStackTrace();
        }
    }

    @Override
    protected void notifyDelete(FavoItem entity) {
        Long key = getKey(entity);
        if (key != null) {
            if (contextWeakReference.get() != null)
                contextWeakReference.get().getContentResolver().delete(
                        ContentUris.withAppendedId(CONTENT_URI, key), null, null);
        }
    }

    @Override
    protected void notifyDelete(Iterable<FavoItem> entities) {
        ArrayList<ContentProviderOperation> ops = new ArrayList<ContentProviderOperation>();

        for (FavoItem entity : entities) {
            Long key = getKey(entity);
            if (key != null) {
                ops.add(ContentProviderOperation.newDelete(
                        ContentUris.withAppendedId(CONTENT_URI, key)).build());
            }
        }

        try {
            if (contextWeakReference.get() != null)
                contextWeakReference.get().getContentResolver().applyBatch(AUTHORITY, ops);
        } catch (RemoteException e) {
            e.printStackTrace();
        } catch (OperationApplicationException e) {
            e.printStackTrace();
        }
    }

    @Override
    protected void notifyDeleteByKey(Long key) {
        if (key != null && contextWeakReference.get() != null) {
            if (key == -1) {
                contextWeakReference.get().getContentResolver().delete(
                        CONTENT_URI, null, null);
            } else {
                contextWeakReference.get().getContentResolver().delete(
                        ContentUris.withAppendedId(CONTENT_URI, key), null, null);
            }
        }
    }

    @Override
    protected void notifyDeleteByKey(Iterable<Long> keys) {
        ArrayList<ContentProviderOperation> ops = new ArrayList<ContentProviderOperation>();

        for (Long key : keys) {
            if (key != null) {
                ops.add(ContentProviderOperation.newDelete(
                        ContentUris.withAppendedId(CONTENT_URI, key)).build());
            }
        }

        try {
            if (contextWeakReference.get() != null)
                contextWeakReference.get().getContentResolver().applyBatch(AUTHORITY, ops);
        } catch (RemoteException e) {
            e.printStackTrace();
        } catch (OperationApplicationException e) {
            e.printStackTrace();
        }
    }

    private Map<Long, WeakHashMap<IModelObservable<FavoItem>, Boolean>> extraObMap = new HashMap<>();

    /**
     * register entity to extraObMap
     */
    public void registerExtraOb(IModelObservable entity) {
        if (entity == null) return;
        if (!extraObMap.containsKey(entity.getModelKey())) {
            extraObMap.put(entity.getModelKey(), new WeakHashMap<>());
        }
        WeakHashMap<IModelObservable<FavoItem>, Boolean> map = extraObMap.get(entity.getModelKey());
        if (!map.containsKey(entity)) {
            map.put(entity, true);
        }
    }

    private void notifyExtraOb(Long key) {
        if (extraObMap.containsKey(key)) {
            FavoItem newEntity = load(key);
            for (IModelObservable<FavoItem> entity : extraObMap.get(key).keySet()) {
                if (entity != null)
                    entity.refresh(newEntity);
            }
        }
    }

    public FavoItem loadEntity(Cursor cursor){
        return this.readEntity(cursor, 0);
    }

}
