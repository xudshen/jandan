package info.xudshen.jandan.data.model.observable;

import info.xudshen.data.BR;

import com.google.gson.annotations.Expose;
import info.xudshen.droiddata.dao.IModelObservable;
import info.xudshen.jandan.domain.enums.ReaderItemType;
import java.sql.Timestamp;
import java.util.ArrayList;
import java.util.List;

import android.databinding.Bindable;

import info.xudshen.jandan.domain.model.ReadLaterItem;

// THIS CODE IS GENERATED BY greenDAO, EDIT ONLY INSIDE THE "KEEP"-SECTIONS

// KEEP INCLUDES - put your custom includes here
// KEEP INCLUDES END
/**
 * IModelObservable<"READ_LATER_ITEM">
 */
public class ReadLaterItemObservable extends android.databinding.BaseObservable  implements IModelObservable<ReadLaterItem> {

    private Long id;
    @Expose
    private Long readLaterItemId;
    @Expose
    private ReaderItemType type;
    @Expose
    private Long actualId;
    @Expose
    private Timestamp addDate;

    // KEEP FIELDS - put your custom fields here
    // KEEP FIELDS END

    public ReadLaterItemObservable() {
    }

    public ReadLaterItemObservable(Long id) {
        this.id = id;
    }

    public ReadLaterItemObservable(Long id, Long readLaterItemId, ReaderItemType type, Long actualId, Timestamp addDate) {
        this.id = id;
        this.readLaterItemId = readLaterItemId;
        this.type = type;
        this.actualId = actualId;
        this.addDate = addDate;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    @Bindable
    public Long getReadLaterItemId() {
        return readLaterItemId;
    }

    public void setReadLaterItemId(Long readLaterItemId) {
        if ((this.readLaterItemId == null && readLaterItemId != null)
                || (this.readLaterItemId != null && !this.readLaterItemId.equals(readLaterItemId))) {
            this.readLaterItemId = readLaterItemId;
            notifyPropertyChanged(BR.readLaterItemId);
        }
    }

    public ReaderItemType getType() {
        return type;
    }

    public void setType(ReaderItemType type) {
        this.type = type;
    }

    @Bindable
    public Long getActualId() {
        return actualId;
    }

    public void setActualId(Long actualId) {
        if ((this.actualId == null && actualId != null)
                || (this.actualId != null && !this.actualId.equals(actualId))) {
            this.actualId = actualId;
            notifyPropertyChanged(BR.actualId);
        }
    }

    @Bindable
    public Timestamp getAddDate() {
        return addDate;
    }

    public void setAddDate(Timestamp addDate) {
        if ((this.addDate == null && addDate != null)
                || (this.addDate != null && !this.addDate.equals(addDate))) {
            this.addDate = addDate;
            notifyPropertyChanged(BR.addDate);
        }
    }


    /**
     * convert entity to entityObservable
     */
    public ReadLaterItemObservable(ReadLaterItem entity) {
        this.id = entity.getId();
        this.readLaterItemId = entity.getReadLaterItemId();
        this.type = entity.getType();
        this.actualId = entity.getActualId();
        this.addDate = entity.getAddDate();
    }

    @Override
    public Long getModelKey() {
        return this.getId();
    }

    @Override
    public void refresh(ReadLaterItem entity) {
        List<Integer> propertyChanges = new ArrayList<>();
        this.id = entity.getId();
        if ((this.readLaterItemId == null && entity.getReadLaterItemId() != null)
                || (this.readLaterItemId != null && !this.readLaterItemId.equals(entity.getReadLaterItemId()))) {
            this.readLaterItemId = entity.getReadLaterItemId();
            propertyChanges.add(BR.readLaterItemId);
        }
        this.type = entity.getType();
        if ((this.actualId == null && entity.getActualId() != null)
                || (this.actualId != null && !this.actualId.equals(entity.getActualId()))) {
            this.actualId = entity.getActualId();
            propertyChanges.add(BR.actualId);
        }
        if ((this.addDate == null && entity.getAddDate() != null)
                || (this.addDate != null && !this.addDate.equals(entity.getAddDate()))) {
            this.addDate = entity.getAddDate();
            propertyChanges.add(BR.addDate);
        }

        if (propertyChanges.size() == 1) {
            notifyPropertyChanged(propertyChanges.get(0));
        } else if (propertyChanges.size() > 1) {
            notifyChange();
        }
    }

    // KEEP METHODS - put your custom methods here
    // KEEP METHODS END

}
