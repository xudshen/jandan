package info.xudshen.jandan.data.model.observable;

import info.xudshen.data.BR;

import com.google.gson.annotations.Expose;
import info.xudshen.droiddata.dao.IModelObservable;
import java.sql.Timestamp;
import java.util.ArrayList;
import java.util.List;

import android.databinding.Bindable;

import info.xudshen.jandan.domain.model.Meta;

// THIS CODE IS GENERATED BY greenDAO, EDIT ONLY INSIDE THE "KEEP"-SECTIONS

// KEEP INCLUDES - put your custom includes here
// KEEP INCLUDES END
/**
 * IModelObservable<"META">
 */
public class MetaObservable extends android.databinding.BaseObservable  implements IModelObservable<Meta> {

    private Long id;
    @Expose
    private String key;
    @Expose
    private String value;
    @Expose
    private Long longValue;
    @Expose
    private Timestamp timeValue;

    // KEEP FIELDS - put your custom fields here
    // KEEP FIELDS END

    public MetaObservable() {
    }

    public MetaObservable(Long id) {
        this.id = id;
    }

    public MetaObservable(Long id, String key, String value, Long longValue, Timestamp timeValue) {
        this.id = id;
        this.key = key;
        this.value = value;
        this.longValue = longValue;
        this.timeValue = timeValue;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    @Bindable
    public String getKey() {
        return key;
    }

    public void setKey(String key) {
        if ((this.key == null && key != null)
                || (this.key != null && !this.key.equals(key))) {
            this.key = key;
            notifyPropertyChanged(BR.key);
        }
    }

    @Bindable
    public String getValue() {
        return value;
    }

    public void setValue(String value) {
        if ((this.value == null && value != null)
                || (this.value != null && !this.value.equals(value))) {
            this.value = value;
            notifyPropertyChanged(BR.value);
        }
    }

    @Bindable
    public Long getLongValue() {
        return longValue;
    }

    public void setLongValue(Long longValue) {
        if ((this.longValue == null && longValue != null)
                || (this.longValue != null && !this.longValue.equals(longValue))) {
            this.longValue = longValue;
            notifyPropertyChanged(BR.longValue);
        }
    }

    @Bindable
    public Timestamp getTimeValue() {
        return timeValue;
    }

    public void setTimeValue(Timestamp timeValue) {
        if ((this.timeValue == null && timeValue != null)
                || (this.timeValue != null && !this.timeValue.equals(timeValue))) {
            this.timeValue = timeValue;
            notifyPropertyChanged(BR.timeValue);
        }
    }


    /**
     * convert entity to entityObservable
     */
    public MetaObservable(Meta entity) {
        this.id = entity.getId();
        this.key = entity.getKey();
        this.value = entity.getValue();
        this.longValue = entity.getLongValue();
        this.timeValue = entity.getTimeValue();
    }

    @Override
    public Long getModelKey() {
        return this.getId();
    }

    @Override
    public void refresh(Meta entity) {
        List<Integer> propertyChanges = new ArrayList<>();
        this.id = entity.getId();
        if ((this.key == null && entity.getKey() != null)
                || (this.key != null && !this.key.equals(entity.getKey()))) {
            this.key = entity.getKey();
            propertyChanges.add(BR.key);
        }
        if ((this.value == null && entity.getValue() != null)
                || (this.value != null && !this.value.equals(entity.getValue()))) {
            this.value = entity.getValue();
            propertyChanges.add(BR.value);
        }
        if ((this.longValue == null && entity.getLongValue() != null)
                || (this.longValue != null && !this.longValue.equals(entity.getLongValue()))) {
            this.longValue = entity.getLongValue();
            propertyChanges.add(BR.longValue);
        }
        if ((this.timeValue == null && entity.getTimeValue() != null)
                || (this.timeValue != null && !this.timeValue.equals(entity.getTimeValue()))) {
            this.timeValue = entity.getTimeValue();
            propertyChanges.add(BR.timeValue);
        }

        if (propertyChanges.size() == 1) {
            notifyPropertyChanged(propertyChanges.get(0));
        } else if (propertyChanges.size() > 1) {
            notifyChange();
        }
    }

    // KEEP METHODS - put your custom methods here
    // KEEP METHODS END

}
